'use strict'
import { test, expect, chromium } from '@playwright/test';  
import * as landingPageLocator from '../locator/landingPage.js';
import { data } from '../test-data/data.js';
import * as settingLocator from '../locator/settingLocator.js';
import * as applicationAnsweringLocator from '../locator/applicationAnswering.js';
import { testcase } from '../ulti-function/reusableTestCase.js';
import { autoGenerationSignup } from '../ulti-function/autoGenerationSignup.js';
import { jobUtils } from '../ulti-function/util.js';
import path from 'path';
import * as profileOverlay from '../locator/profileOverlay.js';

test('applying job', async ()=>{
    //create browser
    const browser = await chromium.launch(); 
    const context = await browser.newContext();
    const vizzy = await context.newPage();
    const mailinator = await context.newPage();
    
    //declare variable for locator
    const header = await landingPageLocator.headerLocators(vizzy);
    const setting = await settingLocator.createJobForm(vizzy);
    const application= await applicationAnsweringLocator.applicationAnswering(vizzy);
    const signUpField = await landingPageLocator.signUpFieldsLocators(vizzy);
    const signInField = await landingPageLocator.signInFieldLocator(vizzy);
    const mailinatorField = await landingPageLocator.mailinatorLocators(mailinator);
    const answerForQuestion1 = await application.answer.question1('Answer 2');
    const answerForQuestion2 = await application.answer.question2('Answer 3');
    const answerLocator = data.locatorData;
    const copyLocator = data.copy;
    const profile = await profileOverlay.profile(vizzy);
    const bioOverLay = profile.bio.bioOverLay;
    const imagePath = path.join('tests', 'image-video', 'image'); 
    const image1 = path.join(imagePath, '0.jpg');
    const image2 = path.join(imagePath, '1.png');
    const skills = profile.skills;
    const customQA = profile.customQA;
    const psych = profile.psych;
    const education = profile.education;
    const share = profile.share;
    const work = profile.work;
    const project = profile.project;
    const media = profile.mediaCard;
    const qa = profile.qaCard;
    
    //autoGenerated Email and password
    const email = autoGenerationSignup.emailAutoGenerate();
    const password = autoGenerationSignup.passwordAutoGenerate();
    const lastName = autoGenerationSignup.generateLastName();

    //declare locator using function
    const DOBCopy = await application.headerQuestions(answerLocator.headerQuestions.DOB);
    const ethnicityCopy = await application.headerQuestions(answerLocator.headerQuestions.ethnicity);
    const genderCopy = await application.headerQuestions(answerLocator.headerQuestions.gender);
    const sexualOrientaltionCopy = await application.headerQuestions(answerLocator.headerQuestions.sexualOrientation);
    const disabilityCopy = await application.headerQuestions(answerLocator.headerQuestions.disability);
    const neurodiverseCopy = await application.headerQuestions(answerLocator.headerQuestions.neurodiverse);
    const religionCopy = await application.headerQuestions(answerLocator.headerQuestions.religion);
    const mealCopy = await application.headerQuestions(answerLocator.headerQuestions.meal);
    const schoolCopy = await application.headerQuestions(answerLocator.headerQuestions.school);
    const ethnicityAnswer = await application.answer.ethnicity.ethnicityAnswer(answerLocator.ethnicity.asainChineseOther);
    const genderAnswer = await application.answer.gender(answerLocator.gender.female);
    const sexualOrientaltionAnswer = await application.answer.sexualOrientation(answerLocator.sexualOrientaltion.heterosexual);
    const disabilityAnswer = await application.answer.disability(answerLocator.disability.combination);
    const neurodiverseAnswer  = await application.answer.neurodiverse(answerLocator.neurodiverse.dyslexia);
    const religionAnswer = await application.answer.religion.religionAnswer(answerLocator.religion.buddhish);
    const mealAnswer = await application.answer.meal(answerLocator.meal.yes);
    const schoolAnswer = await application.answer.school(answerLocator.school.indpendent);
    const pronounsSelection = await bioOverLay.aboutYou.pronouns.selection('He / Him');
    

    //paste in application URL
    await vizzy.goto(data.url.jobSpecificURLStaging);
    await header.cookieAllow.click(); 

    //arrive on the landing page
    await expect(application.landingPage.getStartedButton).toBeVisible();
    await application.landingPage.getStartedButton.click();

    /* no sign up for beta yet because it is still in an old version
    //Sign up
    await testcase.signUpStaging(signUpField, autoGenerationSignup, mailinator, mailinatorField, email, password, lastName);
    */
    
    //Sign in
    await signInField.signInButtonOnModal.click();
    await testcase.signIn(signInField.emailField, signInField.passwordField, data.candidateAccount.email, data.candidateAccount.password, signInField.signInButton);

    //move on to answering questions
    await vizzy.waitForLoadState('domcontentloaded');
    await expect(vizzy).toHaveTitle(data.pageTitle.myApplication);

    //click apply or continue
    await jobUtils.clickApplyOrContinue(vizzy);
    await application.nextButton.click();

    //pre-req question 1
    await answerForQuestion1.click();
    await application.nextButton.click();

    //pre-req question 2
    await answerForQuestion2.click();
    await application.nextButton.click();

    //DOB
    await expect(DOBCopy).toHaveText(copyLocator.EDIQuestion.DOB);
    await application.answer.dateOfBirth.fill('22/11/1999');
    await application.nextButton.click();

    //Ethnicity
    await expect(ethnicityCopy).toHaveText(copyLocator.EDIQuestion.ethnicity);
    await application.answer.ethnicity.container.click();
    await ethnicityAnswer.click();
    await application.nextButton.click();

    //Gender
    await expect(genderCopy).toHaveText(copyLocator.EDIQuestion.gender);
    await genderAnswer.click();
    await application.nextButton.click();

    //sexual orientation
    await expect(sexualOrientaltionCopy).toHaveText(copyLocator.EDIQuestion.sexualOrientaltion);
    await sexualOrientaltionAnswer.click();
    await application.nextButton.click();

    //disability
    await expect(disabilityCopy).toHaveText(copyLocator.EDIQuestion.disability);
    await disabilityAnswer.click();
    await application.nextButton.click();

    //neurodiverse
    await expect(neurodiverseCopy).toHaveText(copyLocator.EDIQuestion.neurodiverse);
    await neurodiverseAnswer.click();
    await application.nextButton.click();

    //religion
    await expect(religionCopy).toHaveText(copyLocator.EDIQuestion.religion);
    await application.answer.religion.dropdownContainer.click();
    await religionAnswer.click();
    await application.nextButton.click();

    //meal
    await expect(mealCopy).toHaveText(copyLocator.EDIQuestion.meal);
    await mealAnswer.click();
    await application.nextButton.click();

    //school
    await expect(schoolCopy).toHaveText(copyLocator.EDIQuestion.school);
    await schoolAnswer.click();
    await application.nextButton.click();

    //arive at bespoken page
    await expect(signUpField.bespokenInputField).toBeVisible();
    await signUpField.bespokenInputField.fill(lastName);
    await application.nextButton.click(); 

    //arrive on application overlay
    await vizzy.waitForLoadState();
    await expect(vizzy).toHaveTitle(data.pageTitle.myProfileTitle);
    //await application.skipButton.click(); only valid for sign up

     // Bio card
    // Profile
    jobUtils.hoverAndClick(profile.bio.hoverElement, profile.bio.editBioButton);
    await bioOverLay.profilePhoto.container.click();
    await bioOverLay.profilePhoto.uploadPhoto.setInputFiles(image2);
   // await profile.saveImage.click(); bug on beta
    await bioOverLay.profilePhoto.coverVideo.fill(data.url.vimeoURL1);

    // About you
    await bioOverLay.aboutYou.container.click();
    await bioOverLay.aboutYou.location.fill('London');
    await bioOverLay.aboutYou.pronouns.container.click();
    await pronounsSelection.click();
    await bioOverLay.aboutYou.business.fill('Game Developer');
    await bioOverLay.aboutYou.businessURL.fill(data.url.businessURL);
    await bioOverLay.aboutYou.bioDescription.fill('Caveman no like modern');

    // Tag
    await bioOverLay.tag.container.click();
    await expect(bioOverLay.tag.copy).toHaveText(data.copy.bio.tag);
    await jobUtils.inputField(bioOverLay.tag.languages, 'Kh', 'Khmer', vizzy);
    await jobUtils.inputField(bioOverLay.tag.nationalities, 'Cam', 'Cambodian', vizzy);
    await jobUtils.inputField(bioOverLay.tag.interests, 'Sai', 'Sailing', vizzy);
    await bioOverLay.tag.container.click();

    // Social platform
    await bioOverLay.socialPlatform.container.click();
    await expect(bioOverLay.socialPlatform.copy).toHaveText(data.copy.bio.socialPlatform);
    await bioOverLay.socialPlatform.inputField.fill('https://www.instagram.com/vizzy_hq/');
    await bioOverLay.socialPlatform.addButton.click();
    
    await profile.saveButton.click();
    await vizzy.waitForTimeout(5000);
    await expect(bioOverLay.bioModal).not.toBeVisible();
    
    //check if submit button is disable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, true);
    
    //Skill
    await jobUtils.hoverAndClick(skills.hover, skills.add);
    await expect(skills.copy).toHaveText(data.copy.skill);
    await jobUtils.inputField(skills.input, 'Sa', 'Sales', vizzy);
    await profile.saveButton.click();

    //check if submit button is disable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, true);

    await customQA.hoverElement.hover();
    await customQA.answerButton.click();
    await customQA.question1.answerButton.hover();
    await customQA.question1.answerButton.click();
    await customQA.answerField.fill('question 1 is answered');
    await profile.saveButton.click();
    await vizzy.waitForLoadState('domcontentloaded');

    
    //image upload only
    await customQA.question2.answerButton.hover();
    await customQA.question2.answerButton.click();
    await jobUtils.uploadingFile('image', customQA.addFile, profile.saveImage, data.fileType.image, vizzy, customQA.addURL, customQA.addButton);
    await profile.saveButton.click();
    await vizzy.waitForLoadState('domcontentloaded');

    
    //mp3 upload only
    await customQA.question3.answerButton.hover();
    await customQA.question3.answerButton.click();
    await jobUtils.uploadingFile('audio', customQA.addFile, profile.saveImage, data.fileType.audio, vizzy, customQA.addURL, customQA.addButton);
    await profile.saveButton.click();
    await vizzy.waitForLoadState('domcontentloaded');

    
    //mp4 uplaod and video link
    await customQA.question5.answerButton.hover();
    await customQA.question5.answerButton.click();
    await jobUtils.uploadingFile('video', customQA.addFile, profile.saveImage, data.fileType.video, vizzy, customQA.addURL, customQA.addButton);
    await profile.saveButton.click();
    await vizzy.waitForLoadState('domcontentloaded');

    
    //portfolio only
    await customQA.question4.answerButton.hover();
    await customQA.question4.answerButton.click();
    await jobUtils.uploadingFile('portfolio', customQA.addFile, profile.saveImage, data.fileType.portfolio, vizzy, customQA.addURL, customQA.addButton);
    await profile.saveButton.click();
    await vizzy.waitForLoadState('domcontentloaded'); 

    //check if submit button is disable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, true);

    
    //psych
    await psych.answerButton.hover();
    await psych.answerButton.click();
    await expect(psych.heading).toBeVisible();
    await psych.takingTest.click();

    await jobUtils.answeringPsychometric(psych, 1, '3', '5', vizzy);
    await jobUtils.answeringPsychometric(psych, 2, '7', '8', vizzy);
    await jobUtils.answeringPsychometric(psych, 3, '3', '1', vizzy);
    await jobUtils.answeringPsychometric(psych, 4, '7', '2', vizzy);
    await jobUtils.answeringPsychometric(psych, 5, '4', '7', vizzy);
    await jobUtils.answeringPsychometric(psych, 6, '4', '1', vizzy);
    await jobUtils.answeringPsychometric(psych, 7, '8', '2', vizzy);
    await jobUtils.answeringPsychometric(psych, 8, '1', '8', vizzy);
    await jobUtils.answeringPsychometric(psych, 9, '2', '1', vizzy);
    await jobUtils.answeringPsychometric(psych, 10, '3', '5', vizzy);
    await psych.answer.pronounsSelection.he.click();
    await psych.answer.submitButton.click();
    await vizzy.waitForTimeout(5000);
    await vizzy.waitForLoadState('domcontentloaded');

    //check if submit button is disable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, true);
    
    //education
    await profile.addContent.click();
    await education.addEducation.click();
    await expect(education.educationModal).toBeVisible();
    await education.institute.fill(data.education.institute);
    await education.url.fill(data.education.url);
    await education.degree.fill(data.education.degree);
    await education.grade.fill(data.education.grade);
    await education.fieldOfStudy.fill(data.education.fieldOfStudy);
    await share.startDate.fill(data.education.startDate);
    await share.endDate.fill(data.education.endDate);
    await education.description.fill(data.education.description);
    await share.logo.setInputFiles(image1);
    await share.saveLogo.click();
    await share.saveButton.click();
    await vizzy.waitForLoadState('domcontentloaded');
    await expect(education.educationModal).not.toBeVisible({timeout: 10000});

    //check if submit button is disable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, true);

    //work
    await profile.addContent.click();
    await work.addWork.click();
    await expect(work.workModal).toBeVisible();
    await work.companyName.fill(data.work.companyName);
    await work.companyURl.fill(data.work.companyURL);
    await work.title.fill(data.work.title);
    await work.location.fill(data.work.location);
    await work.description.fill(data.work.description);
    await share.startDate.fill(data.work.startDate);
    await share.endDate.fill(data.education.endDate);
    await share.logo.setInputFiles(image1);
    await share.saveLogo.click();
    await share.saveButton.click();
    await vizzy.waitForLoadState('domcontentloaded');
    await expect(work.workModal).not.toBeVisible({timeout: 10000});

    //check if submit button is disable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, true);

    //project
    await profile.addContent.click();
    await project.addProject.click();
    await expect(project.modal).toBeVisible();
    await project.title.fill(data.project.title);
    await project.description.fill(data.project.description);
    await share.startDate.fill(data.project.startDate);
    await share.endDate.fill(data.project.endDate);
    await jobUtils.uploadingFile('card', share.upload, share.saveImage, data.fileType.card, vizzy, share.weblinkField, share.addLink);
    await vizzy.waitForTimeout(5000);
    await share.saveButton.click();
    await expect(project.modal).not.toBeVisible({timeout: 50000});

    //check if submit button is disable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, true);

    //media card
    await profile.addContent.click();
    await media.addMedia.click();
    await expect(media.modal).toBeVisible();
    await media.prompt.container.click();
    await media.prompt.aGreatRead.click();
    await media.headline.fill(data.media.headline);
    await media.description.fill(data.media.description);
    await jobUtils.uploadingFile('card', share.upload, share.saveImage, data.fileType.card, vizzy, share.weblinkField, share.addLink);
    await vizzy.waitForTimeout(5000);
    await media.saveButton.click();
    await expect(media.modal).not.toBeVisible({timeout: 50000});

    //check if submit button is disable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, true);

    //qa card
    await profile.addContent.click();
    await qa.addQA.click();
    await expect(qa.modal).toBeVisible();
    await qa.question.container.click();
    await qa.question.nextThreeYear.click();
    await qa.answer.fill('this is an answer');
    await jobUtils.uploadingFile('card', share.upload, share.saveImage, data.fileType.tempoaryQA, vizzy, share.weblinkField, share.addLink);
    await vizzy.waitForTimeout(5000);
    await qa.saveButton.click();
    await expect(qa.modal).not.toBeVisible({timeout: 50000});

    //check if the submit button is enable
    await jobUtils.checkIfSubmitButtonIsDisable(profile.submittedButton, false);

    //submit application
    await profile.submittedButton.click();
    await profile.confirmSubmit.click();
    await vizzy.waitForLoadState('domcontentloaded');
    
    //check for success modal
    await expect(profile.sucessModal).toBeVisible({timeout: 50000});
});