'use strict'
import {test, expect, chromium} from '@playwright/test';  
import * as landingPageLocator from './locator/landingPage.js';
import { data } from './test-data/data.js';
import * as settingLocator from './locator/settingLocator.js';
import * as applicationAnsweringLocator from './locator/applicationAnswering.js';
import { testcase } from './ulti-function/reusableTestCase.js';

import { autoGenerationSignup } from './ulti-function/autoGenerationSignup.js';
import { sign } from 'crypto';
import { jobUtils } from './ulti-function/util.js';

test('applying job', async ()=>{
    //create browser
    const browser = await chromium.launch(); 
    const context = await browser.newContext();
    const vizzy = await context.newPage();
    const mailinator = await context.newPage();
    
    //declare variable for locator
    const dataLocator = data;
    const landingPageHeader = await landingPageLocator.headerLocators(vizzy);
    const setting = await settingLocator.createJobForm(vizzy);
    const application= await applicationAnsweringLocator.applicationAnswering(vizzy);
    const signUpField = await landingPageLocator.signUpFieldsLocators(vizzy);
    const signInField = await landingPageLocator.signInFieldLocator(vizzy);
    const mailinatorField = await landingPageLocator.mailinatorLocators(mailinator);
    const answerForQuestion1 = await application.answer.question1('Answer 2');
    const answerForQuestion2 = await application.answer.question2('Answer 3');
    const answerLocator = data.locatorData;
    const copyLocator = dataLocator.copy;
    
    //autoGenerated Email and password
    const email = autoGenerationSignup.emailAutoGenerate();
    const password = autoGenerationSignup.passwordAutoGenerate();
    const lastName = autoGenerationSignup.generateLastName();

    //declare locator using function
    const DOBCopy = await application.headerQuestions(answerLocator.headerQuestions.DOB);
    const ethnicityCopy = await application.headerQuestions(answerLocator.headerQuestions.ethnicity);
    const genderCopy = await application.headerQuestions(answerLocator.headerQuestions.gender);
    const sexualOrientaltionCopy = await application.headerQuestions(answerLocator.headerQuestions.sexualOrientation);
    const disabilityCopy = await application.headerQuestions(answerLocator.headerQuestions.disability);
    const neurodiverseCopy = await application.headerQuestions(answerLocator.headerQuestions.neurodiverse);
    const religionCopy = await application.headerQuestions(answerLocator.headerQuestions.religion);
    const mealCopy = await application.headerQuestions(answerLocator.headerQuestions.meal);
    const schoolCopy = await application.headerQuestions(answerLocator.headerQuestions.school);
    const ethnicityAnswer = await application.answer.ethnicity.ethnicityAnswer(answerLocator.ethnicity.asainChineseOther);
    const genderAnswer = await application.answer.gender(answerLocator.gender.female);
    const sexualOrientaltionAnswer = await application.answer.sexualOrientation(answerLocator.sexualOrientaltion.heterosexual);
    const disabilityAnswer = await application.answer.disability(answerLocator.disability.combination);
    const neurodiverseAnswer  = await application.answer.neurodiverse(answerLocator.neurodiverse.dyslexia);
    const religionAnswer = await application.answer.religion.religionAnswer(answerLocator.religion.buddhish);
    const mealAnswer = await application.answer.meal(answerLocator.meal.yes);
    const schoolAnswer = await application.answer.school(answerLocator.school.indpendent);
    

    //paste in application URL
    await vizzy.goto(dataLocator.url.jobSpecificURLBeta);
    await landingPageHeader.cookieAllow.click(); 

    //arrive on the landing page
    await expect(application.landingPage.getStartedButton).toBeVisible();
    await application.landingPage.getStartedButton.click();

    /*//Sign up
    await testcase.signUpStaging(signUpField, autoGenerationSignup, mailinator, mailinatorField, email, password, lastName);*/

    //Sign in
    await signInField.signInButtonOnModal.click();
    await testcase.signIn(signInField.emailField, signInField.passwordField, data.dummyTestingAccount.email, data.dummyTestingAccount.password, signInField.signInButton);

    //move on to answering questions
    await vizzy.waitForTimeout(3000);
    await expect(vizzy).toHaveTitle(dataLocator.pageTitle.myApplication);
    await jobUtils.clickApplyOrContinue(vizzy);
    await application.nextButton.click();

    //pre-req question 1
    await answerForQuestion1.click();
    await application.nextButton.click();

    //pre-req question 2
    await answerForQuestion2.click();
    await application.nextButton.click();

    //DOB
    await expect(DOBCopy).toHaveText(copyLocator.EDIQuestion.DOB);
    await application.answer.dateOfBirth.fill('22/11/1999');
    await application.nextButton.click();

    //Ethnicity
    await expect(ethnicityCopy).toHaveText(copyLocator.EDIQuestion.ethnicity);
    await application.answer.ethnicity.container.click();
    await ethnicityAnswer.click();
    await application.nextButton.click();

    //Gender
    await expect(genderCopy).toHaveText(copyLocator.EDIQuestion.gender);
    await genderAnswer.click();
    await application.nextButton.click();

    //sexual orientation
    await expect(sexualOrientaltionCopy).toHaveText(copyLocator.EDIQuestion.sexualOrientaltion);
    await sexualOrientaltionAnswer.click();
    await application.nextButton.click();

    //disability
    await expect(disabilityCopy).toHaveText(copyLocator.EDIQuestion.disability);
    await disabilityAnswer.click();
    await application.nextButton.click();

    //neurodiverse
    await expect(neurodiverseCopy).toHaveText(copyLocator.EDIQuestion.neurodiverse);
    await neurodiverseAnswer.click();
    await application.nextButton.click();

    //religion
    await expect(religionCopy).toHaveText(copyLocator.EDIQuestion.religion);
    await application.answer.religion.dropdownContainer.click();
    await religionAnswer.click();
    await application.nextButton.click();

    //meal
    await expect(mealCopy).toHaveText(copyLocator.EDIQuestion.meal);
    await mealAnswer.click();
    await application.nextButton.click();

    //school
    await expect(schoolCopy).toHaveText(copyLocator.EDIQuestion.school);
    await schoolAnswer.click();
    await application.nextButton.click();

    //arive at bespoken page
    /*await expect(signUpField.bespokenInputField).toBeVisible();
    await signUpField.bespokenInputField.fill(lastName);
    await application.nextButton.click(); */

    //arrive on application overlay
    await vizzy.waitForLoadState();
    await expect(vizzy).toHaveTitle(dataLocator.pageTitle.myProfileTitle);
});